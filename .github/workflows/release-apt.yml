name: Build and Release APT Package

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

jobs:
  build-apt-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build Feluda
        run: |
          cargo build --release
          ls -la target/release/feluda

      - name: Install reprepro
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro

      - name: Setup GPG
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
            if [ -n "${{ secrets.GPG_PASSPHRASE }}" ]; then
              echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --export-secret-key > private.key
              gpg --import private.key
            fi
            echo "‚úÖ GPG key imported successfully"
            gpg --list-keys
          else
            echo "‚ö†Ô∏è No GPG_PRIVATE_KEY secret found - repository will not be signed"
            echo "Creating unsigned repository..."
          fi

            - name: Extract package info from Cargo.toml and release tag
        id: package_info
        run: |
          # Extract version from release tag (remove 'v' prefix if present)
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract package name from Cargo.toml
          PACKAGE_NAME=$(grep '^name = ' Cargo.toml | cut -d'"' -f2)
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Extract description from Cargo.toml
          DESCRIPTION=$(grep '^description = ' Cargo.toml | cut -d'"' -f2)
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

          # Extract maintainer info (use repository URL to construct email)
          REPOSITORY=$(grep '^repository = ' Cargo.toml | cut -d'"' -f2)
          MAINTAINER_EMAIL="feluda@$(echo $REPOSITORY | sed 's|https://github.com/||' | sed 's|/.*||').github.io"
          echo "maintainer_email=$MAINTAINER_EMAIL" >> $GITHUB_OUTPUT

          echo "üöÄ Building $PACKAGE_NAME version: $VERSION"
          echo "üìù Description: $DESCRIPTION"
          echo "üë§ Maintainer: $MAINTAINER_EMAIL"

      - name: Create DEB package
        run: |
          cd apt-repo

          # Create package structure
          mkdir -p ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64/DEBIAN
          mkdir -p ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64/usr/local/bin

          # Copy binary
          cp ../target/release/${{ steps.package_info.outputs.package_name }} ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64/usr/local/bin/
          chmod +x ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64/usr/local/bin/${{ steps.package_info.outputs.package_name }}

          # Create control file
          cat > ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64/DEBIAN/control << EOF
          Package: ${{ steps.package_info.outputs.package_name }}
          Version: ${{ steps.package_info.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libc6
          Maintainer: Feluda Team <${{ steps.package_info.outputs.maintainer_email }}>
          Description: ${{ steps.package_info.outputs.description }}
           Feluda analyzes project dependencies, notes their licenses,
           and flags any permissions that restrict personal or commercial usage
           or are incompatible with your project's license.
          EOF

          # Build DEB package
          dpkg-deb --build ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64

          # Move to incoming directory
          mv ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64.deb incoming/

      - name: Update APT repository
        run: |
          cd apt-repo
          echo "üîç Checking GPG setup..."
          gpg --list-keys || echo "No GPG keys found"

          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "üîê Building signed repository..."
            reprepro -V --section utils --component main --priority optional includedeb bionic incoming/${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64.deb
          else
            echo "‚ö†Ô∏è Building unsigned repository..."
            reprepro -V --section utils --component main --priority optional --nosign includedeb bionic incoming/${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64.deb
          fi

          echo "üìÅ Repository structure after build:"
          find . -name "*.gpg" -o -name "Release*" | head -10

      - name: Commit and push changes
        run: |
          cd apt-repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add ${{ steps.package_info.outputs.package_name }} v${{ steps.package_info.outputs.version }} DEB package"
          git remote set-url origin https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}
          git push origin main

      - name: Trigger GitHub Pages deployment
        run: |
          echo "‚úÖ APT repository updated. GitHub Pages will be deployed automatically."

      - name: Create Release Asset
        run: |
                    # Copy the DEB package to the release assets
          cp apt-repo/incoming/${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64.deb ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64.deb

          # Upload as release asset
          gh release upload ${{ github.ref }} ${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.version }}_amd64.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
